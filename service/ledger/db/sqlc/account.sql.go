// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.17.2
// source: account.sql

package db

import (
	"context"
	"database/sql"
)

const createAccount = `-- name: CreateAccount :execresult
INSERT INTO ` + "`" + `account` + "`" + ` (
  ` + "`" + `owner_id` + "`" + `,
  ` + "`" + `currency` + "`" + `,
  ` + "`" + `balance` + "`" + `,
  ` + "`" + `created_at` + "`" + `
) VALUES (
  ?,
  ?,
  0,
  UTC_TIMESTAMP() + 6
)
`

type CreateAccountParams struct {
	OwnerID  []byte `json:"owner_id"`
	Currency string `json:"currency"`
}

func (q *Queries) CreateAccount(ctx context.Context, arg CreateAccountParams) (sql.Result, error) {
	return q.exec(ctx, q.createAccountStmt, createAccount, arg.OwnerID, arg.Currency)
}

const deleteAccount = `-- name: DeleteAccount :exec
DELETE
FROM ` + "`" + `account` + "`" + `
WHERE ` + "`" + `id` + "`" + ` = $1
`

func (q *Queries) DeleteAccount(ctx context.Context) error {
	_, err := q.exec(ctx, q.deleteAccountStmt, deleteAccount)
	return err
}

const getAccountById = `-- name: GetAccountById :one
SELECT id, owner_id, currency, balance, updated_at, created_at
FROM ` + "`" + `account` + "`" + `
WHERE ` + "`" + `id` + "`" + ` = $1
LIMIT 1
`

func (q *Queries) GetAccountById(ctx context.Context) (Account, error) {
	row := q.queryRow(ctx, q.getAccountByIdStmt, getAccountById)
	var i Account
	err := row.Scan(
		&i.ID,
		&i.OwnerID,
		&i.Currency,
		&i.Balance,
		&i.UpdatedAt,
		&i.CreatedAt,
	)
	return i, err
}

const getAccountsByCurrencyAndOwnerId = `-- name: GetAccountsByCurrencyAndOwnerId :many
SELECT id, owner_id, currency, balance, updated_at, created_at
FROM ` + "`" + `account` + "`" + `
WHERE ` + "`" + `owner_id` + "`" + ` = $1
  AND ` + "`" + `currency` + "`" + ` = $2
`

func (q *Queries) GetAccountsByCurrencyAndOwnerId(ctx context.Context) ([]Account, error) {
	rows, err := q.query(ctx, q.getAccountsByCurrencyAndOwnerIdStmt, getAccountsByCurrencyAndOwnerId)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Currency,
			&i.Balance,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAccountsByOwner = `-- name: GetAccountsByOwner :many
SELECT id, owner_id, currency, balance, updated_at, created_at
FROM ` + "`" + `account` + "`" + `
WHERE ` + "`" + `owner_id` + "`" + ` = $1
`

func (q *Queries) GetAccountsByOwner(ctx context.Context) ([]Account, error) {
	rows, err := q.query(ctx, q.getAccountsByOwnerStmt, getAccountsByOwner)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Account
	for rows.Next() {
		var i Account
		if err := rows.Scan(
			&i.ID,
			&i.OwnerID,
			&i.Currency,
			&i.Balance,
			&i.UpdatedAt,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
